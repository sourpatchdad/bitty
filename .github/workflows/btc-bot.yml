name: Bitty 2.0

on:
  schedule:
    - cron: "*/5 * * * *"  # every 5 minutes
  workflow_dispatch: {}

permissions:
  contents: write  # allow the workflow to commit updated state

concurrency:
  group: bitty-bot
  cancel-in-progress: false

jobs:
  run-bot:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: python -m pip install --upgrade requests

      - name: Ensure state dir
        run: mkdir -p .github/state

      - name: Run bot once
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
        run: |
          python - <<'PY'
import os, json, requests, sys
from datetime import datetime, timezone

WEBHOOK_URL = os.environ["DISCORD_WEBHOOK_URL"]
COINGECKO_SIMPLE = "https://api.coingecko.com/api/v3/simple/price?ids=bitcoin&vs_currencies=usd"
COINGECKO_ATH = ("https://api.coingecko.com/api/v3/coins/bitcoin"
                 "?localization=false&tickers=false&market_data=true"
                 "&community_data=false&developer_data=false&sparkline=false")
STATE_FILE = ".github/state/btc_state.json"
BANDS = [5,10]

def now_iso(): return datetime.now(timezone.utc).isoformat(timespec="seconds")
def send(msg):
    r = requests.post(WEBHOOK_URL, json={"content": msg}, timeout=10)
    r.raise_for_status()
def price():
    r = requests.get(COINGECKO_SIMPLE, timeout=10); r.raise_for_status()
    return float(r.json()["bitcoin"]["usd"])
def seed_ath():
    r = requests.get(COINGECKO_ATH, timeout=20); r.raise_for_status()
    d = r.json().get("market_data", {}).get("ath", {}).get("usd")
    return float(d) if d else None
def fmt(x): return f"${x:,.0f}" if x>=1000 else f"${x:,.2f}"

try:
    with open(STATE_FILE,"r") as f: s=json.load(f)
except:
    s={"initialized":False,"ath":0.0,"baseline_price":0.0,"last_price":0.0}

p = price()
if not s["initialized"]:
    ath = seed_ath() or p
    s.update({"initialized":True,"ath":max(ath,p),"baseline_price":p,"last_price":p})
    os.makedirs(os.path.dirname(STATE_FILE), exist_ok=True)
    with open(STATE_FILE,"w") as f: json.dump(s,f)
    send(f"ðŸŸ¢ Bot init {now_iso()} â€” baseline {fmt(p)}, ATH {fmt(s['ath'])}")
    sys.exit(0)

# One-shot checks
if p > s["ath"]*1.0000005:
    s["ath"]=p
    send(f"ðŸš€ NEW ATH: {fmt(p)} at {now_iso()}")
    s["baseline_price"]=p

if s["baseline_price"]>0:
    pct = (p - s["baseline_price"])/s["baseline_price"]*100
    crossed = next((b for b in sorted(BANDS) if abs(pct)>=b-1e-9), None)
    if crossed is not None:
        direction = "â–² up" if pct>0 else "â–¼ down"
        send(f"ðŸ“ˆ {direction} {abs(pct):.1f}% (band {crossed}%) â€” {fmt(p)} at {now_iso()}\n"
             f"Baseline was {fmt(s['baseline_price'])}")
        s["baseline_price"]=p

s["last_price"]=p
os.makedirs(os.path.dirname(STATE_FILE), exist_ok=True)
with open(STATE_FILE,"w") as f: json.dump(s,f)
PY

      - name: Commit updated state
        run: |
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          if [ -n "$(git status --porcelain .github/state/btc_state.json)" ]; then
            git add .github/state/btc_state.json
            git commit -m "Update btc_state.json $(date -u +'%Y-%m-%dT%H:%M:%SZ')"
            git push
          fi
